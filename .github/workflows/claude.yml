name: Claude Code Assistant with Auto Token Refresh

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  workflow_dispatch:  # Allows manual triggering
  schedule:
    # Refresh token every 6 hours to prevent expiration
    - cron: '0 */6 * * *'

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  refresh-and-run-claude:
    # Only run if comment contains @claude or if it's a scheduled/manual run
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch'
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Refresh Claude OAuth Token
        id: refresh_token
        env:
          CLAUDE_REFRESH_TOKEN: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
        run: |
          python - << 'EOF'
          import os
          import json
          import urllib.request
          import urllib.error
          
          def refresh_token(refresh_token):
              url = "https://console.anthropic.com/v1/oauth/token"
              data = json.dumps({
                  "grant_type": "refresh_token",
                  "refresh_token": refresh_token
              }).encode('utf-8')
              
              req = urllib.request.Request(url, data=data)
              req.add_header('Content-Type', 'application/json')
              
              try:
                  with urllib.request.urlopen(req) as response:
                      result = json.loads(response.read().decode('utf-8'))
                      return result
              except urllib.error.HTTPError as e:
                  error_body = e.read().decode('utf-8')
                  raise Exception(f"HTTP {e.code}: {error_body}")
          
          # Get refresh token from environment
          refresh_token_value = os.environ.get("CLAUDE_REFRESH_TOKEN")
          if not refresh_token_value:
              raise Exception("CLAUDE_REFRESH_TOKEN not found in secrets")
          
          print("🔄 Refreshing Claude OAuth token...")
          
          try:
              # Refresh the token
              token_response = refresh_token(refresh_token_value)
              
              if "access_token" not in token_response:
                  raise Exception("No access token in response")
              
              access_token = token_response["access_token"]
              print("✓ Token refreshed successfully")
              
              # Output for GitHub Actions
              if "GITHUB_OUTPUT" in os.environ:
                  with open(os.environ["GITHUB_OUTPUT"], "a") as f:
                      f.write(f"access_token={access_token}\n")
                      if "refresh_token" in token_response:
                          f.write(f"new_refresh_token={token_response['refresh_token']}\n")
              
              # Mask the token in logs
              print(f"::add-mask::{access_token}")
              
          except Exception as e:
              print(f"❌ Error: {str(e)}")
              exit(1)
          EOF

      # Update secrets using GitHub API if we have a new refresh token
      - name: Update GitHub Secrets
        if: steps.refresh_token.outputs.new_refresh_token
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const sodium = require('tweetsodium');
            
            // Get the public key for encrypting secrets
            const { data: publicKey } = await github.rest.actions.getRepoPublicKey({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            // Encrypt and update the refresh token
            const refreshTokenValue = '${{ steps.refresh_token.outputs.new_refresh_token }}';
            const refreshTokenBytes = Buffer.from(refreshTokenValue);
            const keyBytes = Buffer.from(publicKey.key, 'base64');
            const encryptedRefreshToken = Buffer.from(
              sodium.seal(refreshTokenBytes, keyBytes)
            ).toString('base64');
            
            await github.rest.actions.createOrUpdateRepoSecret({
              owner: context.repo.owner,
              repo: context.repo.repo,
              secret_name: 'CLAUDE_REFRESH_TOKEN',
              encrypted_value: encryptedRefreshToken,
              key_id: publicKey.key_id,
            });
            
            console.log('✓ Updated CLAUDE_REFRESH_TOKEN secret');

      # Only run Claude action if this was triggered by a comment
      - name: Run Claude Code Action
        if: github.event_name == 'issue_comment' || github.event_name == 'pull_request_review_comment'
        uses: grll/claude-code-action@beta
        with:
          use_oauth: true
          claude_access_token: ${{ steps.refresh_token.outputs.access_token }}
          anthropic_model: 'claude-opus-4-20250514'
          max_thinking_length: 20000
          allowed_tools: 'Task,Bash,Glob,Grep,LS,Read,Edit,MultiEdit,Write,NotebookRead,NotebookEdit,TodoRead,TodoWrite,mcp__github_file_ops__commit_files,mcp__github_file_ops__delete_files,mcp__github__add_issue_comment,mcp__github__add_pull_request_review_comment,mcp__github__create_branch,mcp__github__create_issue,mcp__github__create_or_update_file,mcp__github__create_pull_request,mcp__github__create_pull_request_review,mcp__github__create_repository,mcp__github__delete_file,mcp__github__fork_repository,mcp__github__get_code_scanning_alert,mcp__github__get_commit,mcp__github__get_file_contents,mcp__github__get_issue,mcp__github__get_issue_comments,mcp__github__get_me,mcp__github__get_pull_request,mcp__github__get_pull_request_comments,mcp__github__get_pull_request_files,mcp__github__get_pull_request_reviews,mcp__github__get_pull_request_status,mcp__github__get_secret_scanning_alert,mcp__github__get_tag,mcp__github__list_branches,mcp__github__list_code_scanning_alerts,mcp__github__list_commits,mcp__github__list_issues,mcp__github__list_pull_requests,mcp__github__list_secret_scanning_alerts,mcp__github__list_tags,mcp__github__merge_pull_request,mcp__github__push_files,mcp__github__search_code,mcp__github__search_issues,mcp__github__search_repositories,mcp__github__search_users,mcp__github__update_issue,mcp__github__update_issue_comment,mcp__github__update_pull_request,mcp__github__update_pull_request_branch,mcp__github__update_pull_request_comment'
          custom_instructions: "You have also been granted tools for editing files and running bun commands (install, run, test, typecheck) for testing your changes: bun install, bun test, bun run format, bun typecheck."          
          timeout_minutes: "60"
          assignee_trigger: '@claude'
          model: 'claude-sonnet-4-20250514'

      # Log success for scheduled runs
      - name: Log Scheduled Refresh Success
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        run: |
          echo "✅ Scheduled token refresh completed successfully"
          echo "Next refresh will occur at the next scheduled time"
